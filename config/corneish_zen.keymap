/*
*
* Copyright (c) 2021 Darryl deHaan
* SPDX-License-Identifier: MIT
*
*/

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    chosen {
        zmk,matrix_transform = &default_transform;

        // zmk,matrix_transform = &five_column_transform;
    };
};

/ {
    behaviors {
        cpy_pst: cpy_pst {
            compatible = "zmk,behavior-tap-dance";
            label = "CPY_PST";
            #binding-cells = <0>;
            bindings = <&kp LG(C)>, <&kp LG(V)>;

            tapping-term-ms = <125>;
        };

        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            label = "HML";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <150>;
            global-quick-tap;
            flavor = "balanced";
            hold-trigger-key-positions = <36 37 38 39 40 41 30 18 6 7 31 19 8 20 32 33 21 9 10 22 35 34 23 11>;
            hold-trigger-on-release;
        };

        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            global-quick-tap;
            flavor = "balanced";
            hold-trigger-key-positions = <41 40 39 0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38>;
            hold-trigger-on-release;
        };
    };

    combos {
        compatible = "zmk,combos";

        minus {
            bindings = <&kp MINUS>;
            key-positions = <4 7>;
        };

        underscore {
            bindings = <&kp LS(MINUS)>;
            key-positions = <28 31>;
        };

        equals {
            bindings = <&kp EQUAL>;
            key-positions = <17 18>;
        };

        sleep {
            bindings = <&kp LA(LG(C_SLEEP))>;
            key-positions = <24 35>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            label = "BASE";

            // --------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&mt LS(LC(LG(LALT))) ESC  &kp Q         &kp W            &kp F           &kp P          &kp B                          &kp J                        &kp L          &kp U                &kp Y                  &mt RS(SEMICOLON) SEMICOLON  &cpy_pst
&kp DEL                   &hml LCTRL A  &hml LEFT_ALT R  &hml LGUI S     &hml LSHIFT T  &hml LS(LC(LG(LEFT_ALT))) G    &hmr LS(LC(LG(LEFT_ALT))) M  &hmr RSHIFT N  &hmr RGUI E          &hmr LEFT_ALT I        &hmr RCTRL O                 &kp BSPC
&kp SINGLE_QUOTE          &kp Z         &kp X            &kp C           &kp D          &kp V                          &kp K                        &kp H          &mt RS(COMMA) COMMA  &mt RS(PERIOD) PERIOD  &mt LS(SLASH) SLASH          &kp DOUBLE_QUOTES
                                                         &lt 3 CAPSLOCK  &lt 2 TAB      &lt 1 SPACE                    &lt 1 ENTER                  &lt 2 GRAVE    &kp MINUS
            >;
        };

        nav {
            label = "NAV";

            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp ASTRK  &kp MINUS      &mt LS(N7) N7              &mt LS(N8) N8              &mt LS(N9) N9              &kp PLUS    &kp LS(LBKT)                    &kp LS(RBKT)     &kp LPAR                     &kp RPAR   &kp LBKT     &kp RBKT
&kp SLASH  &kp BACKSPACE  &mt LS(NUMBER_4) NUMBER_4  &mt LS(N5) N5              &mt LS(NUMBER_6) NUMBER_6  &kp RET     &mt LS(LC(LG(LEFT_ALT))) CARET  &kp LEFT         &kp DOWN                     &kp UP     &kp RIGHT    &kp DOLLAR
&kp EQUAL  &kp NUMBER_0   &mt LS(NUMBER_1) NUMBER_1  &mt LS(NUMBER_2) NUMBER_2  &mt LS(NUMBER_3) NUMBER_3  &kp DOT     &kp LA(LS(MINUS))               &kp LS(LC(TAB))  &kp PG_DN                    &kp PG_UP  &kp LC(TAB)  &kp TILDE
                                                     &kp TILDE                  &kp SPACE                  &kp N0      &trans                          &trans           &mt LS(BACKSLASH) BACKSLASH
            >;
        };

        system {
            bindings = <
&kp F1       &kp F2  &kp F3  &kp F4  &kp F5  &kp F6    &kp F7      &kp F8        &kp F9        &kp F10          &kp F11       &kp F12
&trans       &trans  &trans  &trans  &trans  &trans    &trans      &kp C_PREV    &kp C_VOL_DN  &kp C_VOLUME_UP  &kp C_NEXT    &trans
&bootloader  &trans  &trans  &trans  &trans  &trans    &bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2     &bt BT_SEL 3  &bt BT_SEL 4
                             &trans  &trans  &trans    &kp C_PLAY  &trans        &kp C_MUTE
            >;

            label = "SYS";
        };

        windowPos {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans                          &kp LS(LA(LC(LG(N7))))        &kp LS(LA(LC(LG(N8))))        &kp LS(LA(LC(LG(N9))))        &trans                     &trans
&trans  &trans  &trans  &trans  &trans  &trans    &kp LS(LA(LC(LG(LEFT_ARROW))))  &kp LS(LA(LC(LG(NUMBER_4))))  &kp LS(LA(LC(LG(N5))))        &kp LS(LA(LC(LG(NUMBER_6))))  &kp LC(LS(LA(LG(RIGHT))))  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &kp LS(LA(LC(LG(N0))))          &kp LS(LA(LC(LG(NUMBER_1))))  &kp LS(LA(LC(LG(NUMBER_2))))  &kp LS(LA(LC(LG(NUMBER_3))))  &trans                     &trans
                        &trans  &trans  &trans    &trans                          &trans                        &trans
            >;
        };
    };
};
